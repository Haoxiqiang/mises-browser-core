diff --git a/chrome/browser/chrome_content_browser_client.cc b/chrome/browser/chrome_content_browser_client.cc
index e5ce608907f720786fa3683b6492c2249e2ce125..906d265a70f63f6944709357ffc58cca926e8b7c 100644
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -1626,7 +1626,7 @@ void ChromeContentBrowserClient::RegisterProfilePrefs(
   registry->RegisterDictionaryPref(
       prefs::kDevToolsBackgroundServicesExpirationDict);
   registry->RegisterBooleanPref(prefs::kSignedHTTPExchangeEnabled, true);
-#if !BUILDFLAG(IS_ANDROID)
+#if !BUILDFLAG(IS_ANDROID) || true
   registry->RegisterBooleanPref(prefs::kAutoplayAllowed, false);
   registry->RegisterListPref(prefs::kAutoplayAllowlist);
   registry->RegisterListPref(
@@ -2100,7 +2100,7 @@ bool ChromeContentBrowserClient::ShouldUseProcessPerSite(
     return true;
   }
 
-#if !BUILDFLAG(IS_ANDROID)
+#if !BUILDFLAG(IS_ANDROID) 
   if (search::ShouldUseProcessPerSiteForInstantSiteURL(site_url, profile))
     return true;
 #endif
@@ -2479,7 +2479,7 @@ std::optional<blink::ParsedPermissionsPolicy>
 ChromeContentBrowserClient::GetPermissionsPolicyForIsolatedWebApp(
     content::WebContents* web_contents,
     const url::Origin& app_origin) {
-#if !BUILDFLAG(IS_ANDROID)
+#if !BUILDFLAG(IS_ANDROID) || true
   // Extensions are exempt from manifest policy enforcement and retain the
   // default frame permissions policy.
   if (app_origin.scheme() == extensions::kExtensionScheme) {
@@ -6751,6 +6751,16 @@ ChromeContentBrowserClient::WillCreateURLLoaderRequestInterceptors(
     }
   }
 
+#if BUILDFLAG(ENABLE_IPFS)
+  {
+    std::unique_ptr<content::URLLoaderRequestInterceptor> ipfs_interceptor =
+        ipfs::IPFSURLLoaderRequestInterceptor::MaybeCreateInterceptor(
+            frame_tree_node_id);
+    if (ipfs_interceptor)
+      interceptors.push_back(std::move(ipfs_interceptor));
+  }
+#endif
+
   return interceptors;
 }
 
